{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api.service\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/common\";\nfunction ReservationsCourantesComponent_div_5_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Libre\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReservationsCourantesComponent_div_5_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"Occup\\u00E9e\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReservationsCourantesComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6)(2, \"div\")(3, \"h4\", 7);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 8);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, ReservationsCourantesComponent_div_5_span_7_Template, 2, 0, \"span\", 9);\n    i0.ɵɵtemplate(8, ReservationsCourantesComponent_div_5_span_8_Template, 2, 0, \"span\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const r_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"R\\u00E9servation #\", r_r1.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", r_r1.borneName, \" - \", r_r1.dateDisplay, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", r_r1.statut === \"libre\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", r_r1.statut === \"occupee\");\n  }\n}\nlet ReservationsCourantesComponent = /*#__PURE__*/(() => {\n  class ReservationsCourantesComponent {\n    constructor(api, auth) {\n      this.api = api;\n      this.auth = auth;\n      this.reservations = [];\n      this.currentUserId = null;\n    }\n    ngOnInit() {\n      this.resolveCurrentUser();\n    }\n    resolveCurrentUser() {\n      const pseudo = this.auth.getPseudoFromToken();\n      if (!pseudo) {\n        // not logged in -> no reservations\n        this.currentUserId = null;\n        this.reservations = [];\n        return;\n      }\n      // try to resolve numeric id for the connected user, then load reservations\n      this.api.list('utilisateurs').subscribe(u => {\n        const found = (u || []).find(x => x.pseudo === pseudo || x.adresseMail === pseudo);\n        if (found) this.currentUserId = found.id;\n        this.load();\n      }, () => {\n        // on error, still attempt to load and fall back to pseudo matching\n        this.currentUserId = null;\n        this.load();\n      });\n    }\n    load() {\n      this.api.list('reservations/mine').subscribe(d => {\n        // treat CONFIRMED (and common case-insensitive variants) as active as well\n        const activeEtats = ['ACTIVE', 'active', 'CONFIRMED', 'confirmed'];\n        let raw = (d || []).filter(r => !r.etat || activeEtats.includes(String(r.etat)));\n        const pseudo = this.auth.getPseudoFromToken();\n        // show only reservations that belong to the connected user\n        raw = raw.filter(r => {\n          // numeric id match\n          if (this.currentUserId) {\n            if (r.utilisateur && (r.utilisateur.id === this.currentUserId || r.utilisateur === this.currentUserId)) return true;\n            if (r.client && (r.client.id === this.currentUserId || r.client === this.currentUserId)) return true;\n            if (r.idUtilisateur && r.idUtilisateur === this.currentUserId) return true;\n          }\n          // fallback to pseudo matching when numeric id not available\n          if (pseudo) {\n            if (r.utilisateur && (r.utilisateur.pseudo === pseudo || r.utilisateur.adresseMail === pseudo)) return true;\n            if (r.client && (r.client.pseudo === pseudo || r.client.adresseMail === pseudo)) return true;\n          }\n          return false;\n        });\n        this.reservations = raw.map(r => {\n          const borneName = r.borne?.nomBorne || r.borne?.nom || r.nomBorne || null || (r.idBorne ? 'Borne #' + r.idBorne : 'Borne');\n          let dateDisplay = '-';\n          try {\n            if (r.dateDebut || r.dateFin) {\n              const d1 = r.dateDebut ? new Date(r.dateDebut) : null;\n              const d2 = r.dateFin ? new Date(r.dateFin) : null;\n              if (d1 && d2) dateDisplay = d1.toLocaleString() + ' → ' + d2.toLocaleString();else if (d1) dateDisplay = d1.toLocaleString();else if (d2) dateDisplay = d2.toLocaleString();\n            } else if (r.heureDebut) {\n              dateDisplay = r.heureDebut;\n            }\n          } catch (e) {\n            dateDisplay = r.dateDebut || r.heureDebut || '-';\n          }\n          // we intentionally keep clientName internally for potential use but do not show it in templates\n          const clientName = r.client?.nom || r.utilisateur?.nom || r.utilisateur?.pseudo || r.client || 'Inconnu';\n          return {\n            ...r,\n            borneName,\n            dateDisplay,\n            clientName\n          };\n        });\n      });\n    }\n    cancel(r) {\n      this.api.delete('reservations', r.id).subscribe(() => this.load());\n    }\n    static {\n      this.ɵfac = function ReservationsCourantesComponent_Factory(t) {\n        return new (t || ReservationsCourantesComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ReservationsCourantesComponent,\n        selectors: [[\"reservations-courantes\"]],\n        decls: 6,\n        vars: 1,\n        consts: [[1, \"min-h-screen\", \"bg-deep\", \"text-white\", \"p-6\"], [1, \"max-w-6xl\", \"mx-auto\"], [1, \"text-2xl\", \"font-semibold\", \"mb-4\"], [1, \"flex\", \"gap-4\", \"overflow-x-auto\"], [\"class\", \"min-w-[320px] bg-white/10 backdrop-blur-md p-4 rounded-xl shadow-md\", 4, \"ngFor\", \"ngForOf\"], [1, \"min-w-[320px]\", \"bg-white/10\", \"backdrop-blur-md\", \"p-4\", \"rounded-xl\", \"shadow-md\"], [1, \"flex\", \"justify-between\", \"items-start\"], [1, \"text-white\", \"font-semibold\"], [1, \"text-gray-300\", \"text-sm\"], [\"class\", \"text-sm bg-green-500 text-black px-2 py-1 rounded-full\", 4, \"ngIf\"], [\"class\", \"text-sm bg-red-500 text-black px-2 py-1 rounded-full\", 4, \"ngIf\"], [1, \"text-sm\", \"bg-green-500\", \"text-black\", \"px-2\", \"py-1\", \"rounded-full\"], [1, \"text-sm\", \"bg-red-500\", \"text-black\", \"px-2\", \"py-1\", \"rounded-full\"]],\n        template: function ReservationsCourantesComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n            i0.ɵɵtext(3, \"R\\u00E9servations en cours\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 3);\n            i0.ɵɵtemplate(5, ReservationsCourantesComponent_div_5_Template, 9, 5, \"div\", 4);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.reservations);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf],\n        styles: [\"[_nghost-%COMP%]{display:block}\"]\n      });\n    }\n  }\n  return ReservationsCourantesComponent;\n})();\nexport { ReservationsCourantesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}