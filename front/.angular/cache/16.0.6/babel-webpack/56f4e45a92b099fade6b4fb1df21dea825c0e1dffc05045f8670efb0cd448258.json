{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nlet AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      const token = localStorage.getItem('token');\n      const request = token ? req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      }) : req;\n      return next.handle(request).pipe(tap(evt => {\n        // noop for successful responses\n      }), catchError(err => {\n        if (err.status === 401 || err.status === 403) {\n          // token invalid or expired -> remove and redirect to login\n          localStorage.removeItem('token');\n          // preserve navigation outside of HTTP context\n          setTimeout(() => this.router.navigateByUrl('/connexion'));\n        }\n        return throwError(() => err);\n      }));\n    }\n    static {\n      this.ɵfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();\nexport { AuthInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}