{"ast":null,"code":"import * as maplibregl from 'maplibre-gl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api.service\";\nimport * as i2 from \"@angular/router\";\nlet CarteComponent = /*#__PURE__*/(() => {\n  class CarteComponent {\n    constructor(api, router) {\n      this.api = api;\n      this.router = router;\n    }\n    ngAfterViewInit() {\n      try {\n        // Use a simple raster style based on OpenStreetMap tiles.\n        // Raster tiles avoid vector sprite/glyph fetch issues and reliably show streets/labels.\n        const osmStyle = {\n          version: 8,\n          sources: {\n            'raster-tiles': {\n              type: 'raster',\n              tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n              tileSize: 256,\n              attribution: '© OpenStreetMap contributors'\n            }\n          },\n          layers: [{\n            id: 'osm-tiles',\n            type: 'raster',\n            source: 'raster-tiles'\n          }]\n        };\n        this.map = new maplibregl.Map({\n          container: 'map',\n          style: osmStyle,\n          center: [2.3522, 48.8566],\n          zoom: 13\n        });\n        // add zoom/rotation controls\n        this.map.addControl(new maplibregl.NavigationControl());\n      } catch (e) {\n        console.error('Map init error', e);\n        return;\n      }\n      this.api.list('bornes').subscribe(b => {\n        b.forEach(borne => {\n          // backend stores coordGPS as \"lat,lon\" string\n          const coords = borne.coordGPS || borne.coord || '';\n          const parts = String(coords).split(',').map(p => p.trim());\n          if (parts.length === 2) {\n            const lat = parseFloat(parts[0]);\n            const lon = parseFloat(parts[1]);\n            if (!isNaN(lat) && !isNaN(lon)) {\n              const el = document.createElement('div');\n              el.className = 'marker-neon';\n              const popupNode = document.createElement('div');\n              popupNode.className = 'popup-glass p-3 rounded-lg text-sm';\n              popupNode.style.background = 'rgba(255,255,255,0.06)';\n              popupNode.style.backdropFilter = 'blur(8px)';\n              popupNode.style.color = '#E6EEF3';\n              popupNode.innerHTML = `<div class=\"font-semibold\">${borne.nomBorne || borne.nom}</div>\n                            <div class=\"text-xs\">Tarif: ${borne.tarif} €/min</div>\n                            <div class=\"text-xs\">Puissance: ${borne.puissance || '-'} kW</div>\n                            <div class=\"mt-2\"><button id=\"reserve-${borne.id}\" class=\"px-3 py-1 rounded bg-cyan-600 text-black\">Réserver</button></div>`;\n              const popup = new maplibregl.Popup({\n                closeButton: true,\n                closeOnClick: false\n              }).setDOMContent(popupNode);\n              // ensure only one popup is open at a time\n              let currentPopup = null;\n              const marker = new maplibregl.Marker(el).setLngLat([lon, lat]).setPopup(popup).addTo(this.map);\n              marker.getElement().addEventListener('click', () => {\n                // close previous popup if open\n                if (currentPopup && currentPopup.isOpen && typeof currentPopup.remove === 'function') {\n                  try {\n                    currentPopup.remove();\n                  } catch (e) {/* ignore */}\n                }\n                popup.addTo(this.map);\n                currentPopup = popup;\n              });\n              // Attach click handler directly on the popup node's button\n              // Use capture of borne.id in closure\n              setTimeout(() => {\n                const btn = popupNode.querySelector(`#reserve-${borne.id}`);\n                if (btn) btn.addEventListener('click', ev => {\n                  ev.stopPropagation();\n                  this.router.navigate(['/reservation'], {\n                    queryParams: {\n                      borne: borne.id\n                    }\n                  });\n                });\n              }, 50);\n            }\n          }\n        });\n      });\n    }\n    static {\n      this.ɵfac = function CarteComponent_Factory(t) {\n        return new (t || CarteComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CarteComponent,\n        selectors: [[\"carte\"]],\n        decls: 4,\n        vars: 0,\n        consts: [[1, \"min-h-screen\", \"bg-deep\", \"text-white\", \"p-6\"], [1, \"max-w-7xl\", \"mx-auto\"], [1, \"bg-white/10\", \"rounded-xl\", \"overflow-hidden\", \"h-[70vh]\"], [\"id\", \"map\", 1, \"w-full\", \"h-full\"]],\n        template: function CarteComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n            i0.ɵɵelement(3, \"div\", 3);\n            i0.ɵɵelementEnd()()();\n          }\n        },\n        styles: [\"#map[_ngcontent-%COMP%]{width:100%;height:70vh;min-height:400px}[_nghost-%COMP%]{display:block}.marker-neon[_ngcontent-%COMP%]{width:22px;height:22px;box-sizing:border-box;border-radius:50%;background:#00D1FF;border:2px solid rgba(0,210,255,.2);box-shadow:0 0 8px 2px #00d2ffd9;backface-visibility:hidden;transform-origin:center;will-change:transform}.popup-glass[_ngcontent-%COMP%]{color:#000!important}\"]\n      });\n    }\n  }\n  return CarteComponent;\n})();\nexport { CarteComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}